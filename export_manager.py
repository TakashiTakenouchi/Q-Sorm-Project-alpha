"""Q-Storm Platform - Markdown Export Manager (Phase 2B)"""
import json
from datetime import datetime
from typing import Dict, Any, List, Optional
from db_manager import DatabaseManager


class MarkdownExporter:
    """分析結果のMarkdown形式エクスポート管理"""

    def __init__(self):
        self.db = DatabaseManager()

    def export_analysis(self, analysis_id: int) -> str:
        """
        単一の分析結果をMarkdown形式でエクスポート

        Args:
            analysis_id: 分析結果ID

        Returns:
            Markdown形式の文字列

        Raises:
            ValueError: 分析結果が見つからない場合
        """
        # 分析結果取得
        with self.db.get_connection() as conn:
            cursor = conn.cursor()
            cursor.execute('''
                SELECT ar.*, s.created_at as session_created_at
                FROM analysis_results ar
                LEFT JOIN sessions s ON ar.session_id = s.session_id
                WHERE ar.id = ?
            ''', (analysis_id,))
            row = cursor.fetchone()

            if not row:
                raise ValueError(f"Analysis ID {analysis_id} not found")

            result = dict(row)

        # 分析タイプ別にフォーマット
        analysis_type = result['analysis_type']

        if analysis_type == 'timeseries':
            return self._format_timeseries(result)
        elif analysis_type == 'histogram':
            return self._format_histogram(result)
        elif analysis_type == 'pareto':
            return self._format_pareto(result)
        else:
            return self._format_generic(result)

    def export_session(self, session_id: str) -> str:
        """
        セッション全体の分析結果をMarkdown形式でエクスポート

        Args:
            session_id: セッションID

        Returns:
            Markdown形式の文字列

        Raises:
            ValueError: 分析結果が見つからない場合
        """
        # 分析結果取得（セッションの存在確認も兼ねる）
        results = self.db.get_analysis_results(session_id=session_id, limit=100)

        if not results:
            raise ValueError(f"No analysis results found for session {session_id}")

        # セッション情報取得（存在しない場合はデフォルト値を使用）
        summary = self.db.get_session_summary(session_id)

        if not summary:
            # セッション情報がない場合は分析結果から作成
            summary = {
                'session_id': session_id,
                'store': results[0].get('store', 'N/A'),
                'created_at': results[0].get('created_at', 'N/A'),
                'analysis_count': len(results),
                'last_analysis': results[0].get('created_at', 'N/A')
            }

        # Markdownヘッダー作成
        md_parts = []
        md_parts.append(f"# Q-Storm 分析レポート")
        md_parts.append(f"\n**セッションID**: `{session_id}`")
        md_parts.append(f"**店舗**: {summary.get('store', 'N/A')}")
        md_parts.append(f"**作成日時**: {summary.get('created_at', 'N/A')}")
        md_parts.append(f"**分析件数**: {summary.get('analysis_count', 0)}件")
        md_parts.append(f"**最終分析**: {summary.get('last_analysis', 'N/A')}")
        md_parts.append("\n---\n")

        # 各分析結果を追加
        for idx, result in enumerate(results, 1):
            md_parts.append(f"\n## 分析 #{idx}: {result['analysis_type'].upper()}")
            md_parts.append(f"\n**分析ID**: {result['id']}")
            md_parts.append(f"**実行日時**: {result['created_at']}")
            md_parts.append(f"**実行時間**: {result['execution_time']:.3f}秒")

            # パラメータ
            params = json.loads(result['parameters'])
            md_parts.append(f"\n### パラメータ")
            for key, value in params.items():
                md_parts.append(f"- **{key}**: {value}")

            # 統計情報
            results_data = json.loads(result['results'])
            if 'statistics' in results_data:
                md_parts.append(f"\n### 統計情報")
                stats = results_data['statistics']
                for key, value in stats.items():
                    if isinstance(value, (int, float)):
                        md_parts.append(f"- **{key}**: {value:,.2f}")
                    else:
                        md_parts.append(f"- **{key}**: {value}")

            # ABC分類（Paretoの場合）
            if result['analysis_type'] == 'pareto' and 'abc_classification' in results_data:
                md_parts.append(f"\n### ABC分類")
                abc = results_data['abc_classification']
                md_parts.append(f"- **Aグループ (0-80%)**: {abc.get('A', {}).get('count', 0)}項目")
                md_parts.append(f"- **Bグループ (80-95%)**: {abc.get('B', {}).get('count', 0)}項目")
                md_parts.append(f"- **Cグループ (95-100%)**: {abc.get('C', {}).get('count', 0)}項目")

            md_parts.append("\n---\n")

        # フッター
        md_parts.append(f"\n*レポート生成日時: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}*")
        md_parts.append(f"\n*Generated by Q-Storm Platform v2.0*")

        return "\n".join(md_parts)

    def _format_timeseries(self, result: Dict[str, Any]) -> str:
        """時系列分析のMarkdownフォーマット"""
        params = json.loads(result['parameters'])
        results_data = json.loads(result['results'])
        stats = results_data.get('statistics', {})

        md_parts = []
        md_parts.append(f"# 時系列分析レポート")
        md_parts.append(f"\n**分析ID**: {result['id']}")
        md_parts.append(f"**セッションID**: `{result['session_id']}`")
        md_parts.append(f"**実行日時**: {result['created_at']}")
        md_parts.append(f"**実行時間**: {result['execution_time']:.3f}秒")

        md_parts.append(f"\n## 分析パラメータ")
        md_parts.append(f"- **指標**: {params.get('metric', 'N/A')}")
        md_parts.append(f"- **時間単位**: {params.get('time_unit', 'N/A')}")
        md_parts.append(f"- **店舗**: {params.get('store', '全店舗')}")

        md_parts.append(f"\n## 統計サマリー")
        md_parts.append(f"- **合計**: {stats.get('sum', 0):,.2f}")
        md_parts.append(f"- **平均**: {stats.get('mean', 0):,.2f}")
        md_parts.append(f"- **最大値**: {stats.get('max', 0):,.2f}")
        md_parts.append(f"- **最小値**: {stats.get('min', 0):,.2f}")
        md_parts.append(f"- **標準偏差**: {stats.get('std', 0):,.2f}")
        md_parts.append(f"- **データ件数**: {stats.get('count', 0)}")

        md_parts.append(f"\n## グラフ情報")
        chart = results_data.get('chart', {})
        md_parts.append(f"- **タイトル**: {chart.get('layout', {}).get('title', {}).get('text', 'N/A')}")
        md_parts.append(f"- **X軸**: {chart.get('layout', {}).get('xaxis', {}).get('title', {}).get('text', 'N/A')}")
        md_parts.append(f"- **Y軸**: {chart.get('layout', {}).get('yaxis', {}).get('title', {}).get('text', 'N/A')}")

        md_parts.append(f"\n---")
        md_parts.append(f"\n*レポート生成日時: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}*")

        return "\n".join(md_parts)

    def _format_histogram(self, result: Dict[str, Any]) -> str:
        """ヒストグラム分析のMarkdownフォーマット"""
        params = json.loads(result['parameters'])
        results_data = json.loads(result['results'])
        stats = results_data.get('statistics', {})

        md_parts = []
        md_parts.append(f"# ヒストグラム分析レポート")
        md_parts.append(f"\n**分析ID**: {result['id']}")
        md_parts.append(f"**セッションID**: `{result['session_id']}`")
        md_parts.append(f"**実行日時**: {result['created_at']}")
        md_parts.append(f"**実行時間**: {result['execution_time']:.3f}秒")

        md_parts.append(f"\n## 分析パラメータ")
        md_parts.append(f"- **指標**: {params.get('metric', 'N/A')}")
        md_parts.append(f"- **ビン数**: {params.get('bins', 'N/A')}")
        md_parts.append(f"- **店舗**: {params.get('store', '全店舗')}")

        md_parts.append(f"\n## 統計サマリー")
        md_parts.append(f"- **平均値**: {stats.get('mean', 0):,.2f}")
        md_parts.append(f"- **中央値**: {stats.get('median', 0):,.2f}")
        md_parts.append(f"- **標準偏差**: {stats.get('std', 0):,.2f}")
        md_parts.append(f"- **最大値**: {stats.get('max', 0):,.2f}")
        md_parts.append(f"- **最小値**: {stats.get('min', 0):,.2f}")
        md_parts.append(f"- **データ件数**: {stats.get('count', 0)}")

        md_parts.append(f"\n## 分布情報")
        md_parts.append(f"- **歪度**: {stats.get('skewness', 0):.3f}")
        md_parts.append(f"- **尖度**: {stats.get('kurtosis', 0):.3f}")

        md_parts.append(f"\n## グラフ情報")
        chart = results_data.get('chart', {})
        md_parts.append(f"- **タイトル**: {chart.get('layout', {}).get('title', {}).get('text', 'N/A')}")
        md_parts.append(f"- **X軸**: {chart.get('layout', {}).get('xaxis', {}).get('title', {}).get('text', 'N/A')}")
        md_parts.append(f"- **Y軸**: {chart.get('layout', {}).get('yaxis', {}).get('title', {}).get('text', 'N/A')}")

        md_parts.append(f"\n---")
        md_parts.append(f"\n*レポート生成日時: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}*")

        return "\n".join(md_parts)

    def _format_pareto(self, result: Dict[str, Any]) -> str:
        """パレート分析のMarkdownフォーマット"""
        params = json.loads(result['parameters'])
        results_data = json.loads(result['results'])
        stats = results_data.get('statistics', {})
        abc = results_data.get('abc_classification', {})

        md_parts = []
        md_parts.append(f"# パレート分析レポート (80/20ルール)")
        md_parts.append(f"\n**分析ID**: {result['id']}")
        md_parts.append(f"**セッションID**: `{result['session_id']}`")
        md_parts.append(f"**実行日時**: {result['created_at']}")
        md_parts.append(f"**実行時間**: {result['execution_time']:.3f}秒")

        md_parts.append(f"\n## 分析パラメータ")
        md_parts.append(f"- **指標**: {params.get('metric', 'N/A')}")
        md_parts.append(f"- **カテゴリ列**: {params.get('category_column', 'N/A')}")
        md_parts.append(f"- **表示件数**: {params.get('top_n', 'N/A')}")
        md_parts.append(f"- **店舗**: {params.get('store', '全店舗')}")

        md_parts.append(f"\n## 統計サマリー")
        md_parts.append(f"- **総カテゴリ数**: {stats.get('total_categories', 0)}")
        md_parts.append(f"- **合計値**: {stats.get('total_value', 0):,.2f}")
        md_parts.append(f"- **80%到達カテゴリ**: {stats.get('categories_for_80_percent', 0)}")
        md_parts.append(f"- **80%到達率**: {stats.get('ratio_for_80_percent', 0):.1f}%")

        md_parts.append(f"\n## ABC分類")
        md_parts.append(f"\n### Aグループ (累積0-80%)")
        md_parts.append(f"- **項目数**: {abc.get('A', {}).get('count', 0)}")
        md_parts.append(f"- **比率**: {abc.get('A', {}).get('percentage', 0):.1f}%")
        md_parts.append(f"- **累積寄与**: 0-80%の売上を占める重要カテゴリ")

        md_parts.append(f"\n### Bグループ (累積80-95%)")
        md_parts.append(f"- **項目数**: {abc.get('B', {}).get('count', 0)}")
        md_parts.append(f"- **比率**: {abc.get('B', {}).get('percentage', 0):.1f}%")
        md_parts.append(f"- **累積寄与**: 80-95%の売上を占める中程度カテゴリ")

        md_parts.append(f"\n### Cグループ (累積95-100%)")
        md_parts.append(f"- **項目数**: {abc.get('C', {}).get('count', 0)}")
        md_parts.append(f"- **比率**: {abc.get('C', {}).get('percentage', 0):.1f}%")
        md_parts.append(f"- **累積寄与**: 95-100%の売上を占める低寄与カテゴリ")

        md_parts.append(f"\n## グラフ情報")
        chart = results_data.get('chart', {})
        md_parts.append(f"- **タイトル**: {chart.get('layout', {}).get('title', {}).get('text', 'N/A')}")
        md_parts.append(f"- **X軸**: {chart.get('layout', {}).get('xaxis', {}).get('title', {}).get('text', 'N/A')}")
        md_parts.append(f"- **Y軸1**: {chart.get('layout', {}).get('yaxis', {}).get('title', {}).get('text', 'N/A')}")
        md_parts.append(f"- **Y軸2 (累積率)**: {chart.get('layout', {}).get('yaxis2', {}).get('title', {}).get('text', 'N/A')}")

        md_parts.append(f"\n## 推奨アクション")
        md_parts.append(f"- **Aグループ**: 在庫管理の最優先、欠品防止、積極的なプロモーション")
        md_parts.append(f"- **Bグループ**: 適切な在庫レベル維持、定期的なレビュー")
        md_parts.append(f"- **Cグループ**: 在庫削減検討、販売終了の可能性評価")

        md_parts.append(f"\n---")
        md_parts.append(f"\n*レポート生成日時: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}*")

        return "\n".join(md_parts)

    def _format_generic(self, result: Dict[str, Any]) -> str:
        """汎用フォーマット（未知の分析タイプ用）"""
        params = json.loads(result['parameters'])
        results_data = json.loads(result['results'])

        md_parts = []
        md_parts.append(f"# 分析レポート: {result['analysis_type'].upper()}")
        md_parts.append(f"\n**分析ID**: {result['id']}")
        md_parts.append(f"**セッションID**: `{result['session_id']}`")
        md_parts.append(f"**実行日時**: {result['created_at']}")
        md_parts.append(f"**実行時間**: {result['execution_time']:.3f}秒")

        md_parts.append(f"\n## パラメータ")
        md_parts.append(f"```json")
        md_parts.append(json.dumps(params, indent=2, ensure_ascii=False))
        md_parts.append(f"```")

        md_parts.append(f"\n## 結果")
        md_parts.append(f"```json")
        md_parts.append(json.dumps(results_data, indent=2, ensure_ascii=False))
        md_parts.append(f"```")

        md_parts.append(f"\n---")
        md_parts.append(f"\n*レポート生成日時: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}*")

        return "\n".join(md_parts)
